
APPStructure:
GLobalData has Editor and input view references and editor has layers and the layers have editable images;


//ImageProcessing files are no longer need functionality moved to others

all shaders here are fragment except vertex that is common for all filter (fragement) shader programs

//all layout(locations) keep same as in uishader(no need)

 /////////ERRORS now and possible
//when shader program changes some getting blanck and glUniform1i give invalid opertaion if keeep getting these getUnifromLocation and set glUniform1i or
get location when shader porgramChanges;


/////needs Improve;
//instead of render to texture try ssbos
//TExture need not(moslty in the buf) be in buffer can directly read from image (check)//buffer cuses extra mem check or not may (or free image memory)
WHen programChanges set frameBuf in Shader to 0 for ui and 1 for renderBuffer,getLocations
JNIcalls.cpp all function have same code in half so make it a function and reduce code
JNI mehtod implementation must be targetLibrary cpp in targetLinkLibs;for example include jniMethods.cpp in main.cpp;
check calling jniMehd directly from c code;
In manifest opengL Version check also in java used versin 2.0 while in c 3.0
after dong gldeleteProgram,glDeleteShader,glDeleteTextures
glClrearColor non need everyFrame;
keep GLobalData specific to app but AppContext same across all apps.
compiling shaders indicate which shader failed compiling
Graphics.h shaders should not take app as input not just these any wher need app* replace by AppContext::getApp()





api/sdk :
java has some deprecated meths check;
use imageReader.h for api >30;

